def majorVersionNumber = Long.valueOf(majorVersion)
def minorVersionNumber = Long.valueOf(minorVersion)
def patchVersionNumber = 0

try {
    patchVersionNumber = Long.valueOf(patchVersion)
} catch (ex) {
    // do nothing
}

allprojects {
    defaultTasks 'clean', 'build', 'testClasses' //allprojects是父Project的一个属性，该属性会返回该Project对象以及其所有子项目。在父项目的build.gradle脚本里，可以通过给allprojects传一个包含配置信息的闭包，来配置所有项目（包括父项目）的共同设置。
    apply plugin: 'idea'

    if (release == '0') {
        version = ""
    } else {
        version = "$majorVersionNumber.$minorVersionNumber.$patchVersionNumber"
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }
    //以上是配置idea插件, inheritOutputDirs 是否继承project的输出目录, outputDir修改当前module的输出目录. 这个改变, 可以在IDEA中的项目属性->module->paths里面看到改变.
}

subprojects {
    ext.gradleExtPath = "$rootDir/gradle"
    apply from: "$gradleExtPath/dependencies.gradle"
    apply plugin: 'java'
    apply plugin: 'groovy'

    repositories {
        flatDir { dirs "$rootDir/libs" }
        mavenLocal()  //使用Maven本地缓存
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()// 优先使用maven库
        jcenter()
    }

    configurations.all({
        exclude group: 'commons-logging', module: 'commons-logging'
    })

    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'
    }
}

task wrapper(type: Wrapper) {        //版本号
    gradleVersion = '4.1'
}

apply from: "$rootDir/deps.gradle"